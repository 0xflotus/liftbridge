syntax = "proto3";
package proto;

import "github.com/tylertreat/go-liftbridge/proto/api.proto";

    
message ServerState {
    string serverID = 1;
}

enum Op {
    CREATE_STREAM = 0;
    SHRINK_ISR    = 1;
    REPORT_LEADER = 2;
    CHANGE_LEADER = 3;
    EXPAND_ISR    = 4;
}

message RaftLog {
    Op             op             = 1;
    CreateStreamOp createStreamOp = 2;
    ShrinkISROp    shrinkISROp    = 3;
    ChangeLeaderOp changeLeaderOp = 4;
    ExpandISROp    expandISROp    = 5;
}

message CreateStreamOp {
    Stream stream = 1;
}

message ShrinkISROp {
    string subject         = 1;
    string name            = 2;
    string replicaToRemove = 3;
    string leader          = 4;
    uint64 leaderEpoch     = 5;
}

message ExpandISROp {
    string subject      = 1;
    string name         = 2;
    string replicaToAdd = 3;
    string leader       = 4;
    uint64 leaderEpoch  = 5;
}

message ReportLeaderOp {
    string subject     = 1;
    string name        = 2;
    string replica     = 3;
    string leader      = 4;
    uint64 leaderEpoch = 5;
}

message ChangeLeaderOp {
    string subject = 1;
    string name    = 2;
    string leader  = 3;
}

message Stream {
    string          subject           = 1;
    string          name              = 2;
    string          consumerGroup     = 3;
    int32           replicationFactor = 4;
    repeated string replicas          = 5;
    string          leader            = 6;
    repeated string isr               = 7;
    uint64          leaderEpoch       = 8;
    uint64          epoch             = 9;
}

// RaftJoinRequest is a request to join a Raft group.
message RaftJoinRequest {
    string nodeID   = 1; // ID of the joining node.
    string nodeAddr = 2; // Address of the joining node.
}

// RaftJoinResponse is a response to a RaftJoinRequest.
message RaftJoinResponse {
    string error = 1; // Error string, omitted if no error. 
}

message MetadataSnapshot {
    repeated Stream streams = 1;
}

message ReplicationRequest {
    string replicaID = 1;
    int64  offset    = 2;
}

message PropagatedRequest {
    Op                  op             = 1;
    CreateStreamRequest createStreamOp = 2;
    ShrinkISROp         shrinkISROp    = 3;
    ReportLeaderOp      reportLeaderOp = 4;
    ExpandISROp         expandISROp    = 5;
}

message Error {
    uint32 code = 1;
    string msg  = 2;
}

message PropagatedResponse {
    Op                   op               = 1;
    Error                error            = 2;
    CreateStreamResponse createStreamResp = 3;
    // Reserving = 4 for shrinkISRResp if needed.
    // Reserving = 5 for reportLeaderResp if needed.
    // Reserving = 6 for expandISRResp if needed.
}

message AdvertiseQueryRequest {
    string id = 1;
}

message AdvertiseQueryResponse {
    string id   = 1;
    string host = 2;
    int32  port = 3;
}
